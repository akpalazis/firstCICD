{
	"info": {
		"_postman_id": "be4adb69-4293-4ea2-906d-1dba94687061",
		"name": "Make requests with tokens",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33463568"
	},
	"item": [
		{
			"name": "localhost:3000 - valid tokens",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should be s message\", function () {",
							"var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response should contain expected data\", function () {",
							"    var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.eql('JWT token is valid');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({",
							"    url: 'http://localhost:3000/login',",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            \"username\": \"admin\",",
							"            \"password\": \"pass\"",
							"        })",
							"    }",
							"}, function(err,res){",
							"    let accessTokenHeader = res.headers.find(header => header.key === 'Set-Cookie' && header.value.includes('accessToken')).value",
							"    let refreshTokenHeader = res.headers.find(header => header.key === 'Set-Cookie' && header.value.includes('refreshToken')).value",
							"    pm.request.headers.add({",
							"        key: 'Authorization',",
							"        value: 'Bearer ' + accessTokenHeader + \", Bearer \" + refreshTokenHeader",
							"});",
							"    ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000 - expired access invalid refreshToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response should be s message\", function () {",
							"var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response should contain expected data\", function () {",
							"    var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.eql('Unauthorized - Invalid Refresh Token');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({",
							"        url: 'http://localhost:3001/generateExpiredAccessTokens/1',",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        }",
							"    }, function(err,res){",
							"        accessTokenHeader = res.json().access ",
							"        refreshTokenHeader = res.json().refresh ",
							"        pm.request.headers.add({",
							"            key: 'Authorization',",
							"            value: 'Bearer ' + accessTokenHeader + \", Bearer \" + \"adasdsad\"",
							"        });",
							"",
							"    });",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000 - No refreshToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response should be s message\", function () {",
							"var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response should contain expected data\", function () {",
							"    var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.eql('Unauthorized - Found Only Single JWT');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({",
							"        url: 'http://localhost:3001/generateExpiredAccessTokens/1',",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        }",
							"    },",
							"     function(err,res){",
							"        let accessTokenHeader = res.json().access",
							"    pm.request.headers.add({",
							"        key: 'Authorization',",
							"        value: 'Bearer ' + accessTokenHeader + \", Bearer \" + \"\"",
							"});",
							"    ",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000 - expired access expired refreshtoken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response should be s message\", function () {",
							"var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response should contain expected data\", function () {",
							"    var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.eql('Unauthorized - Refresh Token Expired');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({",
							"    url: 'http://localhost:3001/fetchToken/1',",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    }",
							"}, function(err,res){",
							"    pm.sendRequest({",
							"        url: 'http://localhost:3001/generateExpiredAccessTokens/1',",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        },",
							"        body: JSON.stringify({",
							"                accessTime: \"-1s\",",
							"                refreshTime: \"-1s\"",
							"                ",
							"            })",
							"    }, function(err,res){",
							"        accessTokenHeader = res.json().access ",
							"        refreshTokenHeader = res.json().refresh ",
							"        pm.request.headers.add({",
							"            key: 'Authorization',",
							"            value: 'Bearer ' + accessTokenHeader + \", Bearer \" + refreshTokenHeader",
							"        });",
							"",
							"    });",
							"});",
							"",
							"",
							"",
							"",
							"    ",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000 - already used refresh token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response should be s message\", function () {",
							"var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response should contain expected data\", function () {",
							"    var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.eql('Unauthorized - Reload Token already used');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Send the first request to fetch the access token",
							"pm.sendRequest({",
							"    url: 'http://localhost:3001/fetchToken/1',",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    }",
							"}, function(err, res) {",
							"    // Extract the access token from the response",
							"    refreshTokenHeader = res.json().refresh;",
							"",
							"    // Wait for 1 second",
							"    setTimeout(function() {",
							"        // Send the second request to generate the expired access token after 1 second",
							"        pm.sendRequest({",
							"            url: 'http://localhost:3001/generateExpiredAccessTokens/1',",
							"            method: 'POST',",
							"            header: {",
							"                'Content-Type': 'application/json'",
							"            }",
							"        }, function(err, res) {",
							"            // Extract the access token from the response",
							"            accessTokenHeader = res.json().access;",
							"",
							"            // Send the third request to generate new access and refresh tokens",
							"            pm.sendRequest({",
							"                url: 'http://localhost:3001/generateTokens/1',",
							"                method: 'POST',",
							"                header: {",
							"                    'Content-Type': 'application/json'",
							"                }",
							"            }, function(err, res) {",
							"                // Add both tokens to the request headers",
							"                pm.request.headers.add({",
							"                    key: 'Authorization',",
							"                    value: 'Bearer ' + accessTokenHeader + \", Bearer \" + refreshTokenHeader",
							"                });",
							"            });",
							"        });",
							"    }, 1000); // Delay for 1 second (1000 milliseconds)",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000 - expired access token valid refresh token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should be s message\", function () {",
							"var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response should contain expected data\", function () {",
							"    var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.eql('JWT token is valid');",
							"});",
							"",
							"pm.test(\"Check that the tokens are changed\", function(){",
							"    const cookies = pm.cookies.all();",
							"    pm.expect(cookies[0].value).to.not.be.eql(pm.environment.get(\"accessPrev\"))",
							"    pm.expect(cookies[1].value).to.not.be.eql(pm.environment.get(\"refreshPrev\"))",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Login to get the current access and refress tokens ",
							"pm.sendRequest({",
							"    url: 'http://localhost:3001/fetchToken/1',",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    }",
							"}, function(err, res) {",
							"    // Extract the access token from the response",
							"    pm.environment.set(\"accessPrev\", res.json().access);",
							"    pm.environment.set(\"refreshPrev\", res.json().refresh);",
							"    pm.sendRequest({",
							"        url: 'http://localhost:3001/generateExpiredAccessTokens/1',",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        },",
							"        body: JSON.stringify({",
							"                accessTime: \"-1s\",",
							"                refreshTime: \"7d\"",
							"                })",
							"        }, function(err, res) {",
							"            accessTokenHeader = res.json().access;",
							"            refreshTokenHeader = res.json().refresh;",
							"            pm.sendRequest({",
							"                url: 'http://localhost:3001/generateTokens/1',",
							"                method: 'POST',",
							"                header: {",
							"                    'Content-Type': 'application/json'",
							"                }",
							"            }, function(err, res) {",
							"                pm.request.headers.add({",
							"                    key: 'Authorization',",
							"                    value: 'Bearer ' + accessTokenHeader + \", Bearer \" + refreshTokenHeader",
							"                });",
							"            });",
							"        });",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
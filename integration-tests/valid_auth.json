{
	"info": {
		"_postman_id": "b6bd0175-00b2-44ea-83b0-d11a272d5433",
		"name": "Make requests without tokens with credentials",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33463568"
	},
	"item": [
		{
			"name": "localhost:3000/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Example test script",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should be s message\", function () {",
							"var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response should contain expected data\", function () {",
							"    var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.eql('Login Successful');",
							"});",
							"",
							"pm.test(\"Check if 2 cookies are present in the response\", function () {",
							"    pm.expect(pm.cookies.count()).to.be.eql(2)",
							"});",
							"",
							"pm.test(\"validate the 2 cookies\", function () {",
							"    pm.expect(pm.cookies.count()).to.be.eql(2)",
							"    let accessTokenHeader = pm.response.headers.find(header => header.key === 'Set-Cookie' && header.value.includes('accessToken'));",
							"    let refreshTokenHeader = pm.response.headers.find(header => header.key === 'Set-Cookie' && header.value.includes('refreshToken'));",
							"",
							"    pm.expect(accessTokenHeader.value).to.be.a('string')",
							"    pm.expect(accessTokenHeader.value).to.be.include('accessToken=')",
							"    pm.expect(refreshTokenHeader.value).to.be.a('string')",
							"    pm.expect(refreshTokenHeader.value).to.be.include('refreshToken=')",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"admin\",\"password\":\"pass\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/login",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000/signup - user exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Example test script",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response should be s message\", function () {",
							"var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response should contain expected data\", function () {",
							"    var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.eql('User Already Exists');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"admin\",\"password\":\"pass\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/signup",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000/signup new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Example test script",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should be s message\", function () {",
							"var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response should contain expected data\", function () {",
							"    var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.eql('User Successfully Created');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"new_user\",\"password\":\"pass\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/signup",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:3000/delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Example test script",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should be s message\", function () {",
							"var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response should contain expected data\", function () {",
							"    var responseBody = pm.response.text(); // Fetch the response body as a string",
							"    pm.expect(responseBody).to.be.eql('User Deleted Successfully');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/delete/new_user",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"delete",
						"new_user"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}